
import os
import openai
import sqlite3
import pytesseract
import csv
import json
from telegram.ext import CallbackQueryHandler
from PIL import Image
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram import Update, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackContext

# API-–∫–ª—é—á–∏ (–û–°–¢–ê–í–õ–Ø–ï–ú –í –ö–û–î–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò)
OPENAI_API_KEY = "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"
TELEGRAM_BOT_TOKEN = "7624151350:AAGC3EYYMV3KMkQtbVlRApMTOks5cG77kxE"

client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("receipts.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —á–µ–∫–æ–≤
cursor.execute('''
CREATE TABLE IF NOT EXISTS receipts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    item TEXT,
    quantity INTEGER,
    price REAL
)
''')
conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", callback_data="scan_receipt")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ.", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫"
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∞–Ω–∞–ª–∏–∑ —á–µ–∫–∞)
async def process_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photo = await update.message.photo[-1].get_file()
    
    file_path = f"receipt_{user_id}.jpg"
    await photo.download_to_drive(file_path)

    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä—É—Å—Å–∫–æ–≥–æ)
    image = Image.open(file_path)
    text = pytesseract.image_to_string(image, lang="rus+eng")

    # GPT-4o –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–µ–∫
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "Extract items, quantity, and price from the receipt. Return data ONLY as CSV in format: 'Item, Quantity, Price' without any additional text or explanations."},
            {"role": "user", "content": text}
        ]
    )

    structured_data = response.choices[0].message.content

async def send_form(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫", web_app=WebAppInfo("https://chekhotskiy.github.io/"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —á–µ–∫:", reply_markup=reply_markup)

async def handle_webapp_data(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.web_app_data.data  # JSON-–¥–∞–Ω–Ω—ã–µ

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
    receipt = json.loads(data)

    item = receipt["Item"]
    quantity = int(receipt["Quantity"])
    price = float(receipt["Price"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO receipts (user_id, item, quantity, price) VALUES (?, ?, ?, ?)",
                   (update.effective_user.id, item, quantity, price))
    conn.commit()

    await query.message.reply_text(f"‚úÖ –ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {item}, {quantity} —à—Ç, {price} ‚ÇΩ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    for line in structured_data.split("\n"):
        parts = line.split(",")  # –§–æ—Ä–º–∞—Ç: "Item, Quantity, Price"
    
        if len(parts) != 3:
            print(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {line}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π

        item, quantity, price = parts

        try:
            quantity = int(quantity.strip())  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            price = float(price.strip())  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            cursor.execute("INSERT INTO receipts (user_id, item, quantity, price) VALUES (?, ?, ?, ?)",
                           (user_id, item.strip(), quantity, price))
        except ValueError as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {line} ({e})")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã

    conn.commit()
    await update.message.reply_text(f"‚úÖ –ß–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n{structured_data}")

# –≠–∫—Å–ø–æ—Ä—Ç —á–µ–∫–æ–≤ –≤ CSV
async def export_receipts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    file_path = f"receipts_{user_id}.csv"

    cursor.execute("SELECT item, quantity, price FROM receipts WHERE user_id = ?", (user_id,))
    receipts = cursor.fetchall()

    if not receipts:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.")
        return

    with open(file_path, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["–¢–æ–≤–∞—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞"])
        writer.writerows(receipts)

    await update.message.reply_document(document=open(file_path, "rb"), filename="receipts.csv")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("export", export_receipts))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.PHOTO, process_receipt))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ–∫–æ–≤
    app.add_handler(CommandHandler("form", send_form))
    app.add_handler(CallbackQueryHandler(handle_webapp_data))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
